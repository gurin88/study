#include<iostream>
#include<queue>
#include<vector>
#include<algorithm>
using namespace std;
int N, M;
int map[20][20];
int visited[20][20];
int dr[4] = {-1,0,1,0};
int dc[4] = {0,1,0,-1};

struct shark {
	int r;
	int c;
	int size;
	int eat;
	int time;
};

bool cmp(shark a, shark b)
{
	if (a.time <= b.time)
	{
		if (a.time == b.time)
		{
			if (a.r <= b.r)
			{
				if (a.r == b.r)
				{
					if (a.c < b.c)
					{
						return true;
					}
					return false;
				}
				return true;
			}
			return false;
		}
		return true;
	}
	return false;
}

int main()
{
	vector<shark> v;
	queue<shark> q;
	shark a;
	int ans = 0;
	cin >> N;
	for (int i = 0; i < N; i++)
		for (int j = 0; j < N; j++)
		{
			cin >> map[i][j];
			if (map[i][j] == 9)
			{
				a = { i,j,2,0,0 };
				map[i][j] = 0;
			}
			
		}
	while(1)
	{
		v.clear();
		for (int i = 0; i < 20; i++)
			for (int j = 0; j < 20; j++)
				visited[i][j] = 0;
		visited[a.r][a.c] = 1;
		q.push(a);
		while (!q.empty())
		{
			int r = q.front().r;
			int c = q.front().c;
			int size = q.front().size;
			int eat = q.front().eat;
			int time = q.front().time;
			q.pop();
			for (int i = 0; i < 4; i++)
			{
				int nr = r + dr[i];
				int nc = c + dc[i];
				if (nr >= 0 && nr < N && nc >= 0 && nc < N)
				{
					if (!visited[nr][nc])
					{
						if (map[nr][nc] == size || map[nr][nc] == 0)
						{
							q.push({ nr,nc,size,eat,time + 1 });
							visited[nr][nc] = 1;
						}
						else if (map[nr][nc] < size)
						{
							visited[nr][nc] = 1;
							v.push_back({ nr,nc,size,eat + 1,time + 1 });
						}
					}
				}
			}
		}

		if (v.size() == 0)
			break;

		

		sort(v.begin(), v.end(), cmp);

		if (v[0].size == v[0].eat)
		{
			v[0].size++;
			v[0].eat = 0;
		}
		map[v[0].r][v[0].c] = 0;
		ans += v[0].time;
		a = { v[0].r,v[0].c,v[0].size,v[0].eat,0 };
	}
	cout << ans;
	return 0;
}
