#include <iostream>
#include <string.h>
#include <queue>
using namespace std;

int N;                      // 지도의 크기
int map[101][101];          // 지도 데이터 배열 
int check[101][101];        // 복구 시간 데이터 배열
int dx[4] = { 0,0,1,-1 };   // x축 이동방향
int dy[4] = { 1,-1,0,0 };   // y축 이동방향
int ans;                    // 최소 복구 시간

void cal_cost(int x, int y) {    // 복구 시간 연산

	queue<pair<int, int>> q;    // int형 pair를 한 객체로 갖는 queue
	q.push(make_pair(x, y));    // 매개변수 x,y를  
	check[x][y] = 0;

	while (!q.empty()) {

		int cx = q.front().first;  // queue 맨앞 인자의 변수1
		int cy = q.front().second; // queue 맨앞 인자의 변수2

		q.pop();

		if (cx == N - 1 && cy == N - 1) // 목적지 도달
		{
			if (check[cx][cy] < ans)
				ans = check[cx][cy];
		}

		for (int i = 0; i < 4; i++)     // 다음 이동시 복구 시간 연산
		{
			int nx = cx + dx[i];        // 이동할 x축 좌표
			int ny = cy + dy[i];        // 이동할 y축 좌표

			if (0 <= nx && nx < N && 0 <= ny && ny < N)
			{
				if (check[nx][ny] > check[cx][cy] + map[nx][ny])
				{
					check[nx][ny] = check[cx][cy] + map[nx][ny];
					q.push(make_pair(nx, ny));
				}
			}
		}
	}
}

int main(void) {

	int testcase;
	cin >> testcase;

	for (int a = 0; a < testcase; a++)
	{
		cin >> N;

		for (int i = 0; i < N; i++) {            // 데이터 배열 입력
			for (int j = 0; j < N; j++) {
				scanf("%1d", &map[i][j]);
				check[i][j] = 1000000000;
			}
		}

		ans = 1000000000;
		cal_cost(0, 0);

		cout << '#' << a + 1 << ' ' << ans << '\n';
	}
	return 0;
}
