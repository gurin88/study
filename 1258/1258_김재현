#include "stdafx.h"
/*
#include <iostream>
#include <algorithm>
#include <vector>
using namespace std;

int t, n, l;
int map[100][100];
int visited[100][100];
int mat[100][3];
int dx[] = { 0,0,1,-1 };
int dy[] = { 1,-1,0,0 };

struct Mat
{
	int col, row, mul;
	Mat(int row, int col, int mul) : row(row), col(col), mul(mul) {}
};

void dfs(int x, int y)
{
	map[x][y] = 0;
	for (int i = 0; i < 4; i++) 
	{
		int ax = x + dx[i];
		int ay = y + dy[i];
		if (ax >= 0 && ay >= 0 && ax < n && ay < n && map[ax][ay] != 0)
		{
			dfs(ax, ay);
		}
	}
}

int compare_Mat(const Mat &a, const Mat &b) {
	if (a.mul == b.mul) {
		return a.row < b.row;
	}
	return a.mul < b.mul;
}


int main()
{
	cin >> t;
	for (int tc = 1; tc <= t; tc++)
	{
		l = 0;
		cin >> n;
		for (int i = 0; i < n; i++)
		{
			for (int j = 0; j < n; j++)
			{
				cin >> map[i][j];
			}
		}

		vector<Mat> v;

		for (int i = 0; i < n; i++)
		{
			for (int j = 0; j < n; j++)
			{
				if (map[i][j] != 0)
				{
					int row_cnt = 1;
					int col_cnt = 1;
					int k = i + 1;
					while (true)
					{
						if (k >= 100 || map[k][j] == 0)
							break;
						if (map[k][j] != 0)
						{
							k++;
							row_cnt++;
						}
					}
					k = j + 1;
					while (true)
					{
						if (k >= 100 || map[i][k] == 0)
							break;
						if (map[i][k] != 0)
						{
							k++;
							col_cnt++;
						}
					}
					dfs(i, j);
					v.push_back(Mat(row_cnt, col_cnt, row_cnt*col_cnt));
				}
			}
		}

		sort(v.begin(), v.end(), compare_Mat);


		cout << "#" << tc << " " << v.size() << " ";
		for (int i = 0; i < v.size(); i++)
		{
			cout << v[i].row << " " << v[i].col;
		}

	}
}
*/
