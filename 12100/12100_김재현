#include"stdafx.h"
#include <iostream>
#include <queue>
using namespace std;
int n;
int map[20][20];
int ans = 0;
queue<int> q;
void butyeo(int dir) 
{
   if (dir == 0)
   {
      for (int j = 0; j < n; j++) 
      {
         int cnt = 0;
         for (int i = 0; i < n; i++) 
            if (map[i][j] != 0)
            {
               q.push(map[i][j]);
               map[i][j] = 0;
            }
         while (!q.empty()) 
         {
            map[cnt++][j] = q.front();
            q.pop();
         }
      }
   }
   else if (dir == 1) 
   {
      for (int i = 0; i < n; i++)
      {

         int cnt = n - 1;
         for (int j = n-1; j >= 0; j--)
            if (map[i][j] != 0)
            {
               q.push(map[i][j]);
               map[i][j] = 0;
            }
         while (!q.empty()) 
         {
            map[i][cnt--] = q.front();
            q.pop();
         }
      }

   }
   else if (dir == 2) 
   {
      for (int j = 0; j < n; j++)
      {
         int cnt = n - 1;
         for (int i = n-1; i >= 0; i--)
            if (map[i][j] != 0)
            {
               q.push(map[i][j]);
               map[i][j] = 0;
            }
         while (!q.empty()) 
         {
            map[cnt--][j] = q.front();
            q.pop();
         }
      }
   }
   else if (dir == 3) 
   {
      for (int i = 0; i < n; i++) 
      {
         int cnt = 0;
         for (int j = 0; j < n; j++) 
            if (map[i][j] != 0)
            {
               q.push(map[i][j]);
               map[i][j] = 0;
            }
         while (!q.empty())
         {
            map[i][cnt++] = q.front();
            q.pop();
         }
      }
   }
}

void dfs(int num) 
{
   if (num == 5)
   {
      for (int i = 0; i < n; i++)
         for (int j = 0; j < n; j++)
            if (map[i][j] > ans)
               ans = map[i][j];
      return;
   }

   int map_copy[20][20];

   for (int i = 0; i < n; i++)
      for (int j = 0; j < n; j++)
         map_copy[i][j] = map[i][j];

   for (int p = 0; p < 4; p++)
   {
      butyeo(p);
      if (p == 0)
      {
         for (int j = 0; j < n; j++)
            for (int i = 0; i < n - 1; i++)
               if (map[i][j] != 0)
                  if (map[i + 1][j] == map[i][j])
                  {
                     map[i][j] *= 2;
                     map[i + 1][j] = 0;
                     i++;
                  }
      }
      else if (p == 1)
      {
         for (int i = 0; i < n; i++)
            for (int j = n - 1; j > 0; j--)
               if (map[i][j] != 0)
                  if (map[i][j - 1] == map[i][j])
                  {
                     map[i][j] *= 2;
                     map[i][j - 1] = 0;
                     j--;
                  }
      }

      else if (p == 2)
      {
         for (int j = 0; j < n; j++)
            for (int i = n - 1; i > 0; i--)
               if (map[i][j] != 0)
                  if (map[i - 1][j] == map[i][j])
                  {
                     map[i][j] *= 2;
                     map[i - 1][j] = 0;
                     i--;
                  }
      }

      else if (p == 3)
      {
         for (int i = 0; i < n; i++)
            for (int j = 0; j < n - 1; j++)
               if (map[i][j] != 0)
                  if (map[i][j + 1] == map[i][j])
                  {
                     map[i][j] *= 2;
                     map[i][j + 1] = 0;
                     j++;
                  }
      }
      butyeo(p);
      dfs(num + 1);
      for (int i = 0; i < n; i++)
         for (int j = 0; j < n; j++)
            map[i][j] = map_copy[i][j];
   }
}

int main()
{
   cin >> n;
   for (int i = 0; i < n; i++) 
      for (int j = 0; j < n; j++)
         cin >> map[i][j];

   dfs(0); 

   cout << ans;
   return 0;
}
