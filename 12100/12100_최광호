#include <iostream>
#include <math.h>
using namespace std;

int map[20][20];
int value[10] = { 0 };
int N;
int output;

// 같은 값을 가진 두 블록이 만나면 합침
// 값 2,4,8,16,32,62,128, 256, 512, 1024 10가지
// 최대 5번 움직여서 얻을수 있는 가장 큰 블록 출력

// 배열의 크기, 말판 배열, 이동횟수, 지금 보는 값
int function1()
{
	for (int a = 1 ; a < 10 ; a++)
		for (int b = 0 ; b < N ; b++)
			for (int c = 0 ; c < N ; c++)
				if (map[b][c] == pow(2, a))
					function2(output, 0, pow(2, a), b, c);	
}
// 배열의 크기, 말판 배열, 이동횟수, 지금 보는 값, 말의 좌표
void function2(int output, int movenum, int chessvalue, int y, int x)
{
	// 5번 이동했는지 확인
	// 기존의 값보다 지금의 값이 더 큰 경우 최신화
	if (movenum == 5)
	{
		if (output < chessvalue)
			output = chessvalue;
		return;
	}
	// 아직 5번 안 움직인 경우
	// 상하좌우 검색해서 만나는 값이 같을 경우 말을 옮겨 합치고 재귀
	// 같은 값의 말이 검색되지 않을경우 return
	for (int a = 1 ; a < N ; a++)     // 상하좌우
	{
		int check = 0;
		if ( 0 <= x-a ) // 위로 이동
		{
			if (map[x - a][y] == 0)
				continue;
			else if (map[x - a][y] == chessvalue)
			{
				map[x - a][y] *= 2;
				function2(output, movenum + 1, chessvalue * 2, y, x - a);
				check = 1;
			}
		}
		if (x + a <= N) // 아래로 이동
		{
			if (map[x + a][y] == 0)
				continue;
			else if (map[x + a][y] == chessvalue)
			{
				map[x + a][y] *= 2;
				function2(output, movenum + 1, chessvalue * 2, y, x + a);
				check = 1;
			}
		}


	}
}

// 제일 작은 값 a을 가진 모든 말에 대해서 
// a크기의 말의 상하좌우를 검색해서 같은 값을 가지는 말을 찾아 합친다.
// 이동해서 합친 2*a크기의 말을 


int main()
{	
	cin >> N;
	for (int a = 0 ; a < N ; a++)
		for (int b = 0; b < N; b++)
		{
			cin >> map[a][b];
			if (map[a][b]!=0)  // 0값이 아닐때 값의 크기를 비교해 갯수 배열에 입력
			{
				int d = map[a][b];
				for (int c = 0; c < 11; c++)
				{
					d = d / 2;
					if (d==1)
						value[c]++;
				}
			}			
		}
	// map배열 출력
	for (int a = 0 ; a < N; a++)
	{
		for (int b = 0; b < N; b++)
		{
			cout << map[a][b] << " ";
		}
		cout << "\n";
	}
	// 숫자 갯수 출력
	for (int a = 0 ; a < N ; a++)
	{
		cout << pow(2,a+1) << "갯수는 : " << value[a] << "\n";
	}

}
