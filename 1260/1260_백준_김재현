#include<iostream>
#include<queue>
using namespace std;
int map[1001][1001] = { 0 };
int visited[1001] = { 0 };
int N;
void dfs(int V)
{
	cout << V << " ";
	visited[V] = 1;
	for (int i = 1; i <= N; i++)
	{
		if (visited[i] == 1 || map[V][i] == 0)
			continue;
		dfs(i);
	}
}

void bfs(int V)
{
	queue<int> q;
	q.push(V);
	visited[V] = 0;
	while (!q.empty()) 
	{
		V = q.front();
		cout << V << " ";
		q.pop();
		for (int i = 1; i <= N; i++) 
		{
			if (visited[i] == 0 || map[V][i] == 0)
				continue;
			q.push(i);
			visited[i] = 0;
		}
	}
}

int main()
{
	int M, V;
	int n1, n2;
	cin >> N >> M >> V;
	for (int i = 0; i < M; i++)
	{
		cin >> n1 >> n2;
		map[n1][n2] = 1;
		map[n2][n1] = 1;
	}

	dfs(V);
	cout << '\n';
	bfs(V);

	return 0;
}
