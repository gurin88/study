#include<iostream>
#include<queue>

using namespace std;

struct ball 
{
	int time;
	int rx;
	int ry;
	int bx;
	int by;
};

int ans = 11;
char map[10][10];
int dx[4] = { -1, 1, 0, 0 };
int dy[4] = { 0, 0, -1, 1 };

int main() 
{
	int n, m;

	cin >> n >> m;

	int rrx, rry, bbx, bby;

	for (int i = 0; i < n; i++)             //데이터 넣으면서 공 위치 체크해줌
		for (int j = 0; j < m; j++)
		{
			cin >> map[i][j];
			if (map[i][j] == 'R')
			{
				rrx = i;
				rry = j;
			}
			else if (map[i][j] == 'B')
			{
				bbx = i;
				bby = j;
			}
		}

	queue<ball> q;

	q.push({ 0, rrx, rry, bbx, bby });     //현재 빨간공 파란공 위치 푸쉬


	while (!q.empty())                     //dfs로 실행
	{
		int cnt = q.front().time;          //큐제일앞에있는거 복사후 pop
		int rx = q.front().rx;
		int ry = q.front().ry;
		int bx = q.front().bx;
		int by = q.front().by;
		q.pop();

		if (cnt == 10)                     //10회되면 끝냄
			break;

		for (int i = 0; i < 4; i++)
		{
			int rex = 0;
			int blue = 0;
			int rm = 0;
			int bm = 0;
			int nrx, nry;
			int nbx, nby;

			bool bex = false;
			bool red = false;

			nbx = bx + dx[i];
			nby = by + dy[i];
			nrx = rx + dx[i];
			nry = ry + dy[i];

			while (map[nrx][nry] != '#')          //빨간공을 먼저 이동시켜봄
			{
				rm++;                             //rm = 빨간공이동거리

				if (nrx == bx && nry == by)
					blue = rm;                    //빨간공 가는 길에 파란공 있으면 파란공위치 체크

				if (map[nrx][nry] == 'O')         //구멍있으면 구멍위치 체크
					rex = rm;

				nrx += dx[i];
				nry += dy[i];
			}

			while (map[nbx][nby] != '#')         //파란공이동
			{
				bm++;                            //bm = 파란공이동거리
				 
				if (nbx == rx && nby == ry)      //파란공가는길에 빨간공있으면 체크
					red = true;

				if (map[nbx][nby] == 'O')        //구멍있으면 체크
					bex = true;

				nbx += dx[i];
				nby += dy[i];
			}

			if (!blue && !red)         //서로 일진선상에없을때
			{
				if (rex)               //빨간공 들어가면 정답바꿔줌
					ans = cnt + 1;
				else if (bex)          //파란공 들어가면 continue
					continue;
				else                   //아무것도안들어가면 위치 push
					if(cnt+1 <ans)
						q.push({ cnt + 1, rx + dx[i] * rm, ry + dy[i] * rm, bx + dx[i] * bm, by + dy[i] * bm });
			}
			else if (blue)             //빨간공가는길에 파란공이 있을 때
			{
				if (rex)               //빨간공이 구멍에 들어갔을 때
				{
					if (rex < blue)    //파란공이 구멍보다 뒤에있을때만 정답바꿔줌
						ans = cnt + 1;
					continue;          //파란공이 구멍보다 앞에있으면 그냥 컨티뉴
				}
				else                   
					if (cnt + 1 <ans)  //빨간공이 구멍에 안들어갔을때 파란공 전칸에 빨간공놔줌
						q.push({ cnt + 1, bx + dx[i] * bm - dx[i], by + dy[i] * bm - dy[i], bx + dx[i] * bm, by + dy[i] * bm });
			}
			else                       //파란공이가는길에 빨간공있을때
			{
				if (rex)               //빨간공이 구멍에들어가버리면 파란공도 들어가므로 continue
					continue;
				else                   
					if (cnt + 1 <ans)  //빨간공 전칸에 파란공놔줌
						q.push({ cnt + 1, rx + dx[i] * rm, ry + dy[i] * rm, rx + dx[i] * rm - dx[i], ry + dy[i] * rm - dy[i] });
			}
		}
	}
	if(ans == 11)
		cout << "-1";
	else
		cout << ans-1;
	return 0;
}
