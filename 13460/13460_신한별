#include <iostream>

using namespace std;

int N, M;
char dx[] = { -1,1,0,0 };
char dy[] = { 0,0,-1,1 };
char arr[10][10];

struct BOX {
	int x;
	int y;
};
BOX hole;
BOX red;
BOX blue;
/*직사각형 보드 세로 N / 가로 M 
테두리 막혀있고 구멍 하나 구슬은 칸 1개
빨간구슬 구멍을 통해 빼내기 / 파란구슬은 구멍에 들어가면 안됨
중력을 이용해 구슬을 굴린다 상하좌우 기울이기

구슬이 움직이지 않을때까지 동작
최소 몇번 만에 구슬을 뺴낼 수 있는가? (10번 이하로 못 꺼내면 -1 출력)
//////////////////////////////////////

입력 : N, M (3~10)
. : 빈칸	# : 이동할 수 없는 벽 또는 장애물
o : 구멍	R : 빨 구슬		B : 파 구슬
*/
void swap(char a, char b)
{
	char temp = a;
	a = b;
	b = temp;
}

void move(int x, int y, int d) 
{
	while (1) {
		x += dx[d]; y += dy[d];	//좌 우 하 상
		if (arr[y][x] == '#') {
			x -= dx[d]; y -= dy[d];
			break;
		}
		else if (arr[y][x] == 'O')
			break;
	}
}
void order(int rx, int ry, int bx, int by, int d)
{
	if (blue.x == red.x && blue.y == red.y) {
		switch (d) {
		case 0: rx < bx ? blue.x++ : red.x++; break;	//좌
		case 1:	rx < bx ? red.x-- : blue.x--; break;	//우
		case 2: ry < by ? red.y-- : blue.y--; break;	//하
		case 3: ry < by ? blue.y++ : red.y++; break;	//상
		}
	}
}
void dfs(int count)
{
	

	//성공했을 때 조건 -> return;
	char arr_copy[10][10];
	for (int i = 0; i < N; i++)
		for (int j = 0; j < M; j++)
			arr_copy[i][j] = arr[i][j];

	for (int i = 0; i < 3; i++) {
	
		switch (i) {
		case 0: {
			int rx = red.x; int ry = red.y; int bx = blue.x; int by = blue.y;
			move(red.x, red.y, 0), move(blue.x, blue.y, 0);
			order(rx, ry, bx, by, 0);
		}
		for (int i = 0; i < N; i++)
			for (int j = 0; j < M; j++)
				arr_copy[i][j] = arr[i][j];
	}

}
	}
int main()
{
	cin >> N >> M;

	for (int i = 0; i < N; i++) {
		for (int j = 0; j < M; j++) {
			cin >> arr[i][j];
			if (arr[i][j] == 'o') {
				hole.x = j;		hole.y = i;
			}
			else if (arr[i][j] == 'R') {
				red.x = j;		red.y = i;
			}
			else if (arr[i][j] == 'B') {
				blue.x = j;		blue.y = i;
			}
		}
	}//////////////////////////초기화 및 구멍 위치
	dfs(0);

	if (res > 10)
		cout << "-1" << endl;
	else
		cout << res << endl;
	
	return 0;

}
