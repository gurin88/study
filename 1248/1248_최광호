#include<iostream>

using namespace std;

#define MAXNODESIZE 10001

struct Tree {
   int parent;
   int child[2]; // 2진 트리
};
Tree tree[MAXNODESIZE];
int parentappear[MAXNODESIZE];

void initTree() {   // 트리 초기화
   for (int i = 0; i <= MAXNODESIZE; ++i) {
      tree[i].parent = 0;
      tree[i].child[0] = 0;
      tree[i].child[1] = 0;
      parentappear[i] = 0;
   }
}

int subtreedepth;

void traversetree(int root) {
   subtreedepth++;
   if (tree[root].child[0] != 0)
      traversetree(tree[root].child[0]);
   if (tree[root].child[1] != 0) 
      traversetree(tree[root].child[1]);
}

int main(int argc, char** argv)
{
   int testcase; // 테스트 케이스 갯수
   
   cin >> testcase;

   for (testcase = 1; testcase <= 10; testcase++)
   {
      int subtreeroot = 0;
      subtreedepth = 0;

      initTree();

      int V, E;
      int candidate1, candidate2;      
      
      cin >> V >> E;
      cin >> candidate1 >> candidate2;

      for (int i = 0; i < E; ++i) {
         int tmpparent;
         int tmp_child;

         cin >> tmpparent >> tmp_child;

         tree[tmp_child].parent = tmpparent;

         for (int j = 0; j < 2; ++j) {
            if (tree[tmpparent].child[j] == 0) {
               tree[tmpparent].child[j] = tmp_child;
               break;
            }
         }
      }

      while (tree[candidate1].parent != 0) {
         parentappear[tree[candidate1].parent] = 1;
         candidate1 = tree[candidate1].parent;
      }

      while (tree[candidate2].parent != 0) {
         if (parentappear[tree[candidate2].parent] == 1) {
            subtreeroot = tree[candidate2].parent;
            break;
         }
         else {
            parentappear[tree[candidate2].parent] = 1;
            candidate2 = tree[candidate2].parent;
         }
      }

      traversetree(subtreeroot);

      cout << '#' << testcase << " " << subtreeroot << " " << subtreedepth << "\n";

   }
   return 0;
}
