#include "stdafx.h"
#include <iostream>
#include <vector>
#include <queue>
using namespace std;
int map[50][50];
int visited[50][50];
int dr[4] = {-1,0,1,0};
int dc[4] = {0,1,0,-1};
struct pos {
	int r;
	int c;
};
int main()
{
	vector<pos> v;
	queue<pos> q;
	int N, L, R;
	int ans = 0;
	cin >> N >> L >> R;
	for (int i = 0; i < N; i++)
		for (int j = 0; j < N; j++)
			cin >> map[i][j];
	while (1)
	{
		bool flag = false;
		for (int i = 0; i < N; i++)
			for (int j = 0; j < N; j++)
			{
				if (!visited[i][j])
				{
					v.clear();
					q.push({ i,j });
					v.push_back({ i,j });
					visited[i][j] = 1;
					while (!q.empty())
					{
						int r = q.front().r;
						int c = q.front().c;
						q.pop();
						for (int k = 0; k < 4; k++)
						{
							int nr = r + dr[k];
							int nc = c + dc[k];
							if (nr >= 0 && nr < N&& nc >= 0 && nc < N)
								if (!visited[nr][nc])
									if (abs(map[nr][nc] - map[r][c]) >= L && abs(map[nr][nc] - map[r][c]) <= R)
									{
										v.push_back({ nr,nc });
										q.push({ nr,nc });
										visited[nr][nc] = 1;
										flag = true;
									}
						}
					}
					if (v.size() == 1)
						continue;
				}
				int temp = 0;
				for (int i = 0; i < v.size(); i++)
					temp += map[v[i].r][v[i].c];
					
				int temp2 = temp / v.size();
				for (int i = 0; i < v.size(); i++)
					map[v[i].r][v[i].c] = temp2;
			}
		for (int i = 0; i < N; i++)
			for (int j = 0; j < N; j++)
				visited[i][j] = 0;
		if (flag)
			ans++;
		else
			break;
	}
	cout << ans;
	return 0;
}
