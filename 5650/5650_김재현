#include "stdafx.h"
#include <iostream>

using namespace std;
int N;
int num;
int map[102][102];
int dx[] = { 0,1,0,-1 };
int dy[] = { 1,0,-1,0 };  //아래0 오른쪽1 위2 왼쪽3
int change[6][5] = { {0, 1, 2, 3},    //0
					 {1, 3, 0, 2},    //1
					 {2, 3, 1, 0},    //2
					 {2, 0, 3, 1},    //3
					 {3, 2, 0, 1},    //4
					 {2, 3, 0, 1} };  //5

void dfs(int x, int y, int d)
{
	int cnt = 0;;
	int sx = x, sy = y;
	while (1)
	{
		int nx = x + dx[d], ny = y + dy[d];
		if ((sx==nx && sy==ny)||map[nx][ny] == -1)
			if (num < cnt)
			{
				num = cnt;
				return;
			}
		if (map[nx][ny])
		{
			if (map[nx][ny] < 6)
			{
				d = change[map[nx][ny]][d];
				cnt++;
			}
			else if (map[nx][ny] >= 6)
			{
				for (int i = 0; i < N; i++)
					for (int j = 0; j < N; j++)
						if (nx != x && ny != y && map[i][j] == map[nx][ny])
						{
							nx = i;
							ny = j;
						}
			}
		}
		x = nx;
		y = ny;
	}
}

void first()
{
	
}

int main()
{
	int T;
	cin >> T;

	for (int case_num = 1; case_num <= T; case_num++)
	{
		cin >> N;
		
		for (int i = 1; i <= N; i++)
			for (int j = 1; j <= N; j++) 
				cin >> map[i][j];
		for (int i = 1; i <= N; i++)
			for (int j = 1; j <= N; j++)
			{
				num = 0;
				for (int k = 0; k <= N + 1; k++)
					map[k][0] = map[k][N + 1] = map[0][k] = map[N + 1][k] = 5;
				for (int k = 0; k<N; k++)
					for (int l = 0; j < N; l++)
					{
						if (map[k][l] == 0)
							for (int d = 0; d < 4; d++)
								dfs(k, l, d);
					}
			}
		cout << "#" << case_num << " " << num << endl;
	}
	return 0;
}
