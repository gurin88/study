#include "stdafx.h"
#include <iostream>

using namespace std;

struct Pos 
{
	int y, x;
};

Pos start[100*100 + 5];
Pos worm_hole[5][2];

int change[6][4] = {
{ 0,0,0,0 },
{ 2,0,3,1 },
{ 2,3,1,0 },
{ 1,3,0,2 },
{ 3,2,0,1 },
{ 2,3,0,1 }
};
int map[102][102];
int dx[] = { 1,0,-1,0 };
int dy[] = { 0,1,0,-1 };
int N, start_size, ans;

bool IsSafe(Pos cur)
{
	return cur.y >= 0 && cur.y < N && cur.x >= 0 && cur.x < N;
}

int first(Pos s, int dir)
{
	Pos cur = s;
	int cnt = 0;
	int ny, nx;

	while (1)
	{
		ny = cur.y + dy[dir];
		nx = cur.x + dx[dir];
		if (IsSafe({ ny, nx }) == false)
		{
			cur.y = ny;
			cur.x = nx;
			dir = (dir + 2) % 4;
			cnt++;
		}
		else if (map[ny][nx] >= 1 && map[ny][nx] <= 5)
		{
			cur.y = ny;
			cur.x = nx;
			dir = change[map[ny][nx]][dir];
			cnt++;
		}
		else if (map[ny][nx] >= 6 && map[ny][nx] <= 10)
		{
			if 
				(worm_hole[map[ny][nx] - 6][0].y == ny && worm_hole[map[ny][nx] - 6][0].x == nx)
				cur = worm_hole[map[ny][nx] - 6][1];
			else if 
				(worm_hole[map[ny][nx] - 6][1].y == ny && worm_hole[map[ny][nx] - 6][1].x == nx)
				cur = worm_hole[map[ny][nx] - 6][0];
		}
		else 
		{
			cur.y = ny;
			cur.x = nx;
		}

		if ((cur.y == s.y && cur.x == s.x) || map[cur.y][cur.x] == -1)
			return cnt;
	}
}

int main()
{
	int T, temp;

	cin >> T;
	for (int testcase = 1; testcase <= T; testcase++)
	{
		start_size = 0;
		for (int i = 0; i < 5; i++)
			worm_hole[i][0] = worm_hole[i][1] = { -1,-1 };
		ans = -1;
		cin >> N;
		for (int j = 0; j < N; j++) 
			for (int i = 0; i < N; i++)
			{
				cin >> map[j][i];
				if (map[j][i] == 0) 
					start[start_size++] = { j, i };
				if (map[j][i] >= 6 && map[j][i] <= 10) 
				{
					if (worm_hole[map[j][i] - 6][0].y == -1)
						worm_hole[map[j][i] - 6][0] = { j, i };
					else 
						worm_hole[map[j][i] - 6][1] = { j, i };
				}
			}

		for (int i = 0; i < start_size; i++)
			for (int dir = 0; dir < 4; dir++) 
			{
				temp = first(start[i], dir);
				if (temp > ans) 
					ans = temp;
			}
	

		cout << "#" << testcase << " " << ans << '\n';
	}

	return 0;
}
