#include<stdio.h>
#include<iostream>

using namespace std;
/*
배열에서 우측에서 왼쪽으로 검색해서 1이 나온 기점으로 읽음
7개를 기준으로 10진수로 변환
(홀수위치의 값 * 3 + 짝수위치값 + 검증코드) 연산값의 1의 자리가 0이면 맞은 검증코드
검증코드가 맞으면 암호코드에 포함된 숫자들의 합, 틀리면 0 출력
*/

int main()
{
	int input_value1 = 0; // 입력값의 CASE 갯수
	int input_value2 = 0; // 입력값의 행 갯수
	int input_value3 = 0; // 입력값의 열 갯수
	char input_value4[50][100] = { 0 }; // 암호코드 배열
	int output[8] = { 0 }; // 변환값
	int output_check = 0;  // 암호코드 확인용 변수 
	int output_sum = 0;    // 변환값의 합
	bool endflag = 0;

	cin >> input_value1;
	//std::cout << "input_value : " << input_value1 << "\n";

	for (int i = 0; i < input_value1; i++)  // case값만큼 반복
	{		
		cin >> input_value2;
		cin >> input_value3;	
		for (int j = 0; j < input_value2; j++)  // 행의 갯수만큼 입력받기
		{
			cin >> input_value4[j];
		}
		for (int j = 0; j < input_value2; j++)  // 행의 갯수만큼 입력받기
		{
			for (int k = input_value3 - 1; k >= 0; k--) // 입력받은 문자열에서 역순으로 1 검색
			{
				if (input_value4[j][k] == '1') // 검색한 값이 1인경우
				{
					for (int b = 0 ; b < 8 ; b++)
						output[b] = 0;

					// 값을 변환하여 output배열에 입력
					for (int m = 0; m < 8; m++) // 8구역으로 나누고 반복
					{
						if (input_value4[j][k - (7 * m) - 1] == '0') //0,1,3,5
						{
							if (input_value4[j][k - (7 * m) - 2] == '0') //1,5
							{
								if (input_value4[j][k - (7 * m) - 3] == '0')
									output[7 - m] = 5;
								else output[7 - m] = 1;
							}
							else //0,3
							{
								if (input_value4[j][k - (7 * m) - 4] == '0')
									output[7 - m] = 0;
								else output[7 - m] = 3;
							}
						}
						else //2,4,6,7,8,9
						{
							if (input_value4[j][k - (7 * m) - 2] == '0') //2,4,7,9
							{
								if (input_value4[j][k - (7 * m) - 3] == '0') // 2,4
								{
									if (input_value4[j][k - (7 * m) - 4] == '0')
										output[7 - m] = 4;
									else
										output[7 - m] = 2;
								}
								else //7,9 
									if (input_value4[j][k - (7 * m) - 4] == '0')
										output[7 - m] = 9;
									else
										output[7 - m] = 7;
							}
							else //6,8
							{
								if (input_value4[j][k - (7 * m) - 3] == '0')
									output[7 - m] = 8;
								else output[7 - m] = 6;
							}
						}
					}
					// 배열값으로 판단후 sum 연산
					output_check = ((output[0] + output[2] + output[4] + output[6]) * 3) + (output[1] + output[3] + output[5]) + output[7];
					//cout <<output_check<<"\n";
					if ((output_check % 10) == 0)   // 검증코드가 올바를 경우 각 값의 합 출력
					{
						output_sum = 0;
						for (int l = 0; l < 8; l++)
							output_sum += output[l];
					}
					else 
						output_sum = 0;           // 검증코드가 틀렸을 경우 0으로 출력	

					endflag = 1;
					break;
				}					
			}
			if (endflag)
				break;
		}
		std::cout << "#" << i + 1 << " " << output_sum << "\n";	
		endflag = 0;
	}
	return 0;
}
